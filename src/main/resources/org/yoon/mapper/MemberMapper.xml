<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.yoon.mapper.MemberMapper">
<!-- 검색 조건 -->
<sql id="criteria">
	<trim prefixOverrides="OR" prefix="(" suffix=") AND">
		<foreach collection="typeArr" item="type">
			<trim prefix="OR">
				<choose>
					<when test="type == 'id'.toString()">userid like '%'||#{keyword}||'%'</when>
					<when test="type == 'name'.toString()">username like '%'||#{keyword}||'%'</when>
					<when test="type == 'email'.toString()">useremail like '%'||#{keyword}||'%'</when>
				</choose>
			</trim>
		</foreach>
	</trim>
</sql>

  <resultMap type="org.yoon.domain.MemberVO" id="memberMap">
    <id property="userid" column="userid"/>
    <result property="userid" column="userid"/>
    <result property="userpw" column="userpw"/>
    <result property="username" column="username"/>
    <result property="useremail" column="useremail"/>
    <result property="regDate" column="regdate"/>
    <result property="updateDate" column="updatedate"/>
    <collection property="authList" resultMap="authMap">
    </collection> 
  </resultMap>
  
  <resultMap type="org.yoon.domain.AuthVO" id="authMap">
    <result property="userid" column="userid"/>
    <result property="auth" column="auth"/>
  </resultMap>
  
  <select id="read" resultMap="memberMap">
SELECT 
  mem.userid,  userpw, username, useremail, enabled, regdate, updatedate, auth
FROM 
  member mem LEFT OUTER JOIN member_auth auth on mem.userid = auth.userid 
WHERE mem.userid = #{userid} 
  </select>

<!-- id중복체크 -->
<select id="idChk" parameterType="String" resultType="int">
	SELECT count(*)
	FROM member
	WHERE userid = #{userid}
</select>

<!-- 이메일 중복체크 -->
<select id="emailCheck" parameterType="String" resultType="int">
	SELECT count(*)
	FROM member
	WHERE useremail = #{useremail}
</select>

<!-- 회원 리스트 페이징 출력 -->
<select id="getListPaging" resultType="org.yoon.domain.MemberVO">
	<![CDATA[
	select
		 userid, username, regDate, useremail
	from
	 (
	 select /*+INDEX_DESC(member pk_member) */
	 		rownum rn, userid, username, regDate, useremail
	 from 
	   	 member
	 where  
	 ]]>
	 <include refid="criteria"/>
	<![CDATA[
		rownum <= #{pageNum} * #{amount}
		)
	where rn > (#{pageNum} -1 )* #{amount}	
	]]>	 	 	
</select>

<!-- 전체 회원 수 출력 -->
<select id="getTotal" resultType="int">
	select count(*) from member 
	<![CDATA[
	where mno > 0 
	]]>	
</select>

<!-- 내가 쓴 게시글(최신5개) 출력 -->
<select id="getAllboard" resultType="org.yoon.domain.BoardVO">
	select rownum rn,b.*
	from(
		select *
		from
			(select 
				bno,type,regdate,writer,content,title
			from board
		union
			select
				gno,g_type,g_regdate,g_writer,g_content,g_title
			from g_board)a
			where writer=#{userid} and rownum>0
			 order by regdate desc)b
				<![CDATA[
		where rownum<6
				]]>	
</select>


<!-- 내가 쓴 게시글 개수 -->
<select id="getAllboardCount" resultType="int">
	select count(*)
	from (select * from board 
union all
	select * from g_board
			)
	where writer=#{userid} 
</select>

<!-- 내가 쓴 댓글 개수 -->



<!-- 회원가입 -->	
	<insert id="insert">
		INSERT ALL
			INTO member(mno, userid, userpw, username, useremail,regdate) values(member_sequence.nextval, #{userid}, #{userpw}, #{username}, #{useremail}, sysdate)
            INTO member_auth(userid, auth) values(#{userid}, 'ROLE_USER')
        SELECT * FROM DUAL       	
	</insert>
	

<!-- 네이버전용 회원가입 -->	
	<insert id="insertN">
		INSERT ALL
			INTO member(mno, userid, userpw, username, useremail,naverLogin) values(member_sequence.nextval, #{userid}, #{userpw}, #{username}, #{useremail}, #{naverLogin})
            INTO member_auth(userid, auth) values(#{userid}, 'ROLE_USER')
        SELECT * FROM DUAL       	
	</insert>	
	

<!-- 회원 정보 수정 -->
<update id="update">
update member set username = #{username}, updatedate = sysdate where userid= #{userid}
</update>

<!-- 네이버 연동 여부 -->
	<select id="naverChk" resultType="org.yoon.domain.MemberVO">
	  select userid,useremail, username, naverLogin from member where naverLogin =#{naverLogin} OR useremail = #{useremail}
</select>
	

<!-- 네이버연동 회원으로 정보 수정 -->
<update id="updateN">
update member set naverLogin = #{naverLogin} where useremail=#{useremail}
</update>

<!-- 회원탈퇴 -->
<delete id="deleteUser">
	delete from member where userid=#{userid}
</delete>

</mapper>